# ==============================================================================
# Copyright (C) 2018-2025 Intel Corporation
#
# SPDX-License-Identifier: MIT
# ==============================================================================

.DEFAULT_GOAL := help
SHELL := /bin/bash
nproc ?= 1

PROJECT_DIRECTORY 			:= ${CURDIR}
DLSTREAMER_INSTALL_PREFIX 	?= /opt/intel/dlstreamer
DEPENDENCY_DIR				:= build/deps
OPENVINO_DIR 				?= /opt/intel/openvino_2025/

DLSTREAMER_VERSION 	:= 0.0.0
BUILD_ARG 			:= Release

DOCKER_PRIVATE_REGISTRY := # Empty on purpose

export PATH 					:= ${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install/bin:${PROJECT_DIRECTORY}/build/intel64/Release/bin:${HOME}/.local/bin:${HOME}/python3venv/bin:${PATH}
export GST_PLUGIN_PATH 			:= ${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/gstreamer-bin/lib/gstreamer-1.0:${PROJECT_DIRECTORY}/build/intel64/Release/lib:/usr/lib/x86_64-linux-gnu/gstreamer-1.0
export LIBRARY_PATH 			:= ${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install/lib:${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/gstreamer-bin/lib:${PROJECT_DIRECTORY}/build/intel64/Release/lib:/usr/lib:${LD_LIBRARY_PATH}
export PKG_CONFIG_PATH 			:= ${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install/lib/pkgconfig:${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/gstreamer-bin/lib/pkgconfig:${PROJECT_DIRECTORY}/build/intel64/Release/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}
export LIBVA_DRIVER_NAME 		:= iHD
export LIBVA_DRIVERS_PATH 		:= /usr/lib/x86_64-linux-gnu/dri
export GST_VA_ALL_DRIVERS 		:= 1
export GST_PLUGIN_FEATURE_RANK := ${GST_PLUGIN_FEATURE_RANK},ximagesink:MAX


.PHONY: dependencies
dependencies:
	cmake \
		-B build/deps \
		./dependencies
	cmake --build build/deps

.PHONY: build
build: dependencies ## Compile DLStreamer
	source ${OPENVINO_DIR}/setupvars.sh
	cmake \
		-B build \
		-DCMAKE_PREFIX_PATH:PATH=${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install \
		-DCMAKE_INCLUDE_PATH:PATH=${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install/include \
		-DCMAKE_LIBRARY_PATH:PATH=${PROJECT_DIRECTORY}/${DEPENDENCY_DIR}/install/lib \
		-DENABLE_PAHO_INSTALLATION=ON \
		-DENABLE_RDKAFKA_INSTALLATION=ON \
		-DENABLE_VAAPI=ON \
		-DENABLE_SAMPLES=ON \
		-DENABLE_TESTS=OFF 
	cmake --build build

.PHONY: build22
build22: opencv build

.PHONY: install
install: build ## Build and install DLStreamer
	@echo "Installing DLStreamer"
	@mkdir -p ${DLSTREAMER_INSTALL_PREFIX}
	@mkdir -p ${DLSTREAMER_INSTALL_PREFIX}/gstreamer
	@cp -r build/deps/gstreamer-bin/* ${DLSTREAMER_INSTALL_PREFIX}/gstreamer
	@cp -r build/intel64/${BUILD_ARG} ${DLSTREAMER_INSTALL_PREFIX}
	@cp -r samples/ ${DLSTREAMER_INSTALL_PREFIX}
	@cp -r python/ ${DLSTREAMER_INSTALL_PREFIX}
	@cp -r scripts/ ${DLSTREAMER_INSTALL_PREFIX}
	@cp -r include/ ${DLSTREAMER_INSTALL_PREFIX}
	@cp README.md ${DLSTREAMER_INSTALL_PREFIX}
	@echo "Installation successful"

.PHONY: deb
deb: ## Build the DLStreamer DEB package for Ubuntu 24.04
	mkdir -p build/packages/deb
	docker build . \
		-f docker/ubuntu/ubuntu24.Dockerfile \
		-t deb-builder \
		--target deb-builder \
		--build-arg http_proxy=${http_proxy} \
		--build-arg https_proxy=${https_proxy} \
		--build-arg DLSTREAMER_VERSION=${DLSTREAMER_VERSION} \
		--build-arg DLSTREAMER_BUILD_NUMBER=1 \
		--build-arg DEV_MODE=true \
		--build-arg DOCKER_PRIVATE_REGISTRY=${DOCKER_PRIVATE_REGISTRY}
	docker create \
		--name deb-builder \
		deb-builder
	docker cp deb-builder:/intel-dlstreamer_${DLSTREAMER_VERSION}.1_amd64.deb ./build/packages/deb
	docker rm deb-builder

.PHONY: deb22
deb22: ## Build the DLStreamer DEB package for Ubuntu 22.04
	mkdir -p build/packages/deb
	docker build . \
		-f docker/ubuntu/ubuntu22.Dockerfile \
		-t deb-builder \
		--target deb-builder \
		--build-arg http_proxy=${http_proxy} \
		--build-arg https_proxy=${https_proxy} \
		--build-arg DLSTREAMER_VERSION=${DLSTREAMER_VERSION} \
		--build-arg DLSTREAMER_BUILD_NUMBER=1 \
		--build-arg DEV_MODE=true \
		--build-arg DOCKER_PRIVATE_REGISTRY=${DOCKER_PRIVATE_REGISTRY}
	docker create \
		--name deb-builder \
		deb-builder
	docker cp deb-builder:/intel-dlstreamer_${DLSTREAMER_VERSION}.1_amd64.deb ./build/packages/deb
	docker rm deb-builder

.PHONY: rpm
rpm: ## Build the DLStreamer RPM package
	mkdir -p build/packages/rpm
	docker build . \
		-t rpm-builder \
		-f docker/fedora41/fedora41.Dockerfile \
		--target rpm-builder \
		--build-arg http_proxy=${http_proxy} \
		--build-arg https_proxy=${https_proxy} \
		--build-arg DLSTREAMER_VERSION=${DLSTREAMER_VERSION} \
		--build-arg DLSTREAMER_BUILD_NUMBER=1 \
		--build-arg DEV_MODE=true \
		--build-arg DOCKER_PRIVATE_REGISTRY=${DOCKER_PRIVATE_REGISTRY}
	docker create \
		--name rpm-builder \
		rpm-builder
	docker cp rpm-builder:/intel-dlstreamer-${DLSTREAMER_VERSION}.1-1.fc41.x86_64.rpm ./build/packages/rpm
	docker rm rpm-builder

.PHONY: image
image: ## Build the DLStreamer docker image based on Ubuntu 24.04
	docker build . \
		-f docker/ubuntu/ubuntu24.Dockerfile \
		-t dlstreamer:dev \
		--target dlstreamer \
		--build-arg http_proxy=${http_proxy} \
		--build-arg https_proxy=${https_proxy} \
		--build-arg DLSTREAMER_VERSION=${DLSTREAMER_VERSION} \
		--build-arg DLSTREAMER_BUILD_NUMBER=1 \
		--build-arg DEV_MODE=true \
		--build-arg DOCKER_PRIVATE_REGISTRY=${DOCKER_PRIVATE_REGISTRY}

.PHONY: image22
image22: ## Build the DLStreamer docker image based on Ubuntu 22.04
	docker build . \
		-f docker/ubuntu/ubuntu22.Dockerfile \
		-t dlstreamer:dev \
		--target dlstreamer \
		--build-arg http_proxy=${http_proxy} \
		--build-arg https_proxy=${https_proxy} \
		--build-arg DLSTREAMER_VERSION=${DLSTREAMER_VERSION} \
		--build-arg DLSTREAMER_BUILD_NUMBER=1 \
		--build-arg DEV_MODE=true \
		--build-arg DOCKER_PRIVATE_REGISTRY=${DOCKER_PRIVATE_REGISTRY}

.PHONY: clean
clean: ## Cleanup any build artifacts
	@rm -rf build

.PHONY: help
help: ## Display help about the commands
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
